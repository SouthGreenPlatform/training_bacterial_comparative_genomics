{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bacterial comparative genomics","text":""},{"location":"#course-overview","title":"Course overview","text":"<p> GitHub repository      8 - 9 June, 2023</p> <p>This course aims at discovering the main bioinformatics for comparing bacterial genomes, from pairwise comparison to a large scale pan-genome analysis.</p>"},{"location":"#course-content-and-learning-outcomes","title":"Course content and learning outcomes","text":"<p>The following topics and tools are covered in the course: Genome assembly, Identification of plasmid scaffolds, Annotation, circos visualization, ANI, pan-gene atlas, pan-GWAS, pangenome graph</p>"},{"location":"#application","title":"Application","text":"<p>By accepting to participate in the course, you agree to follow the Code of Conduct.</p>"},{"location":"#schedule","title":"Schedule","text":"<p>8 June</p> <ul> <li>Genome assembly</li> <li>Identification of plasmid scaffolds</li> <li>Annotation (structural and functional annotation) of bacterial genomes</li> <li>Circos representation of genomes</li> <li>Pairwise comparison of genomes (ANI)</li> </ul> <p>9 June</p> <ul> <li>Comparative analysis of gene content  </li> <li>PAV (Presence/Absence Variation))  </li> <li>Pan-genome/core-genome aspects  </li> <li>pan-GWAS  </li> <li>Pan-genome graph approach  </li> </ul>"},{"location":"#location","title":"Location","text":"<p>This course round is given on site. It will take place in the Badiane room at Agropolis.</p>"},{"location":"#course-material","title":"Course material","text":"<p>here lists all the information you need before the course starts. </p>"},{"location":"#teachers","title":"Teachers","text":"<ul> <li>Alexis Dereeper (course leader)</li> <li>Jacques Dainat</li> <li>Florian Charriat</li> <li>Antoni Exbrayat</li> </ul>"},{"location":"#contact","title":"Contact","text":"<p>To contact us, please send a mail using the contact form available here.</p>"},{"location":"pages/lecture/","title":"Lecture","text":""},{"location":"pages/training/","title":"Handsome bacterial comparative genomics","text":""},{"location":"pages/training/#first-commands-for-preparing-the-working-environment","title":"First commands for preparing the working environment","text":"<p>First create your working directory:</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg\ncd /scratch3/TP_bcg/$USER/training_bcg\n</code></pre> <p>We can now download the git repository of this training that contains material needed for the training.</p> <pre><code>git clone https://github.com/SouthGreenPlatform/training_bacterial_comparative_genomics.git\n</code></pre> <p>We also need some raw data:</p> <pre><code>mkdir raw_data\ncd raw_data\nwget https://panexplorer.southgreen.fr/data/mysample.fastq.gz\n</code></pre> <p>Question</p> <pre><code>Using a unix command, count how many reads are in the raw Fastq file?\n</code></pre> Solution <pre><code>zgrep -c 'barcode=' mysample.fastq.gz\n</code></pre>"},{"location":"pages/training/#genome-assembly-from-oxford-nanopore-technologies-ont-long-reads-using-flye","title":"Genome Assembly (from Oxford Nanopore Technologies (ONT) long reads) (using Flye)","text":"<p>We start by creating and moving into a directory dedicated for the task:</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/assembly\ncd /scratch3/TP_bcg/$USER/training_bcg/assembly\n</code></pre> <p>We will use Flye to perform the genome assembly.  Load the appropriate module for flye (module load) or install the tool locally with conda </p> <pre><code>conda create -n flye -c bioconda flye\nconda activate flye\n</code></pre> <p>We can now run the assembly   </p> <pre><code>flye --nano-raw /scratch3/TP_bcg/$USER/training_bcg/raw_data/mysample.fastq.gz -o assembly &gt;&gt;flye.log 2&gt;&amp;1\n</code></pre> <p>As this task is a high time consuming step, we can stop the tool with <code>CTRL-C</code> and download the expected output:</p> <pre><code>cp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/data/precomputed_assembly/assembly_precomputed.fasta .\n</code></pre> <p>Question</p> <pre><code>How many contigs could be assembled from reads?\n</code></pre> Solution <pre><code>grep -c \"&gt;\" assembly_precomputed.fasta\n</code></pre>"},{"location":"pages/training/#separate-chromosomal-and-plasmid-scaffolds-using-mob-suite","title":"Separate chromosomal and plasmid scaffolds (using MOB-Suite)","text":"<p>Let's start by creating and moving into a directory dedicated for the task:</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/mob_recon\ncd /scratch3/TP_bcg/$USER/training_bcg/mob_recon\n</code></pre> <p>We will run MOB-suite using a singularity image. </p> <p>Run the <code>mob_recon</code> utility using singularity image (<code>/scratch3/TP_bcg/mob_suite_3.0.3.sif</code>) to separate chromosome and plasmid contigs First, load the appropriate module for running singularity Use the <code>--bind</code> option to bind your current directory on the host to <code>/mnt</code> in the container</p> <pre><code>module load system/singularity/3.6.0\ncp -rf /scratch3/TP_bcg/mob_suite_3.0.3.sif .\ncp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/data/precomputed_assembly/assembly_precomputed.fasta .\nsingularity exec --bind /scratch3/TP_bcg/$USER/training_bcg/mob_recon/:/tmp mob_suite_3.0.3.sif mob_recon -i /tmp/assembly_precomputed.fasta -o /tmp/assembly.mob_recon\n</code></pre> <p>The results is made by 4 files <code>chromosome.fasta  contig_report.txt  mobtyper_results.txt  plasmid_AD399.fasta</code></p> <p>We can have a look at the report:</p> <p>Question</p> <pre><code>Looking at the MOB-SUITE report, does our sequenced sample contain plasmid sequence?\n</code></pre> Solution <p><pre><code>more assembly.mob_recon/contig_report.txt\n</code></pre> <pre><code>sample_id   molecule_type   primary_cluster_id  secondary_cluster_id    contig_id   size    gc  md5 circularity_status  rep_type(s) rep_type_accession(s)   relaxase_type(s)    relaxase_type_accession(s)  mpf_type    mpf_type_accession(s)   orit_type(s)    orit_accession(s)   predicted_mobility  mash_nearest_neighbor   mash_neighbor_distance  mash_neighbor_identification    repetitive_dna_id   repetitive_dna_type filtering_reason\nassembly_precomputed    chromosome  -   -   contig_1_circular_rotated   4682534 63.833983907004196  cf955654136e9041810a80b8191fa41f    not tested  -   -   MOBP    NC_007507_00032 -   -   -   -   -   -   -   -   -   -   -\nassembly_precomputed    plasmid AD399   -   contig_2_circular_rotated   69058   61.861044339540676  475037e138b4ade1836aa05f421c47b8    not tested  rep_cluster_1289    000607__CP000620_00033  MOBP    CP022994_00148  -   -   -   -   -   CP033195    0.0537328   Xanthomonas oryzae pv. oryzae   -   -   -\n</code></pre></p>"},{"location":"pages/training/#genome-annotation-using-prokka","title":"Genome annotation (using Prokka)","text":"<p>We will now annotate the chromosome. Let's start by creating and moving into a directory dedicated for the task.  </p> <p>Annotation will be performed on the chromosome file only (not plasmid). A symbolic link can be created to have the chromosome.fasta file in the current directory.</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/prokka\ncd /scratch3/TP_bcg/$USER/training_bcg/prokka\nln -s /scratch3/TP_bcg/$USER/training_bcg/mob_recon/assembly.mob_recon/chromosome.fasta\n</code></pre> <p>We will use Prokka to perform the genome annotation. Load the appropriate module for prokka (module load) or install the tool locally with conda</p> <pre><code>module load bioinfo/prokka/1.14.6\n</code></pre> <p>or</p> <pre><code>conda create -n prokka -c conda-forge -c bioconda prokka\nconda activate prokka\n</code></pre> <p>List the database that will be used by prokka for annotation</p> <pre><code>prokka --listdb\n</code></pre> <p>We can now launch the annotation: </p> <pre><code>prokka chromosome.fasta --prefix assembly --force --outdir prokka_out &gt;&gt; prokka.log 2&gt;&amp;1\n</code></pre> <p>You can now deactivate the prokka conda environment</p> <pre><code>conda deactivate\n</code></pre> <p>Let's have a look at the Genebank output file:</p> <pre><code>head -40 prokka_out/assembly.gbk\n</code></pre> Solution <pre><code>LOCUS       contig_1_circular_rotated4682534 bp   DNA  linear       10-JUN-2022\nDEFINITION  Genus species strain strain.\nACCESSION   \nVERSION\nKEYWORDS    .\nSOURCE      Genus species\nORGANISM  Genus species\n            Unclassified.\nCOMMENT     Annotated using prokka 1.14.6 from\n            https://github.com/tseemann/prokka.\nFEATURES             Location/Qualifiers\n    source          1..4682534\n                    /organism=\"Genus species\"\n                    /mol_type=\"genomic DNA\"\n                    /strain=\"strain\"\n    CDS             1..1329\n                    /gene=\"dnaA\"\n                    /locus_tag=\"GBGACGDJ_00001\"\n                    /inference=\"ab initio prediction:Prodigal:002006\"\n                    /inference=\"similar to AA sequence:UniProtKB:P03004\"\n                    /codon_start=1\n                    /transl_table=11\n                    /product=\"Chromosomal replication initiator protein DnaA\"\n                    /db_xref=\"COG:COG0593\"\n                    /translation=\"MDAWPRCLERLEAEFPPEDVHTWLKPLQAEDRGDSIVLYAPNAF\n                    IVDQVRERYLPRIRELLAYFAGNREVALAVGSRPRAPEPEPAPVAATIAPQAAPIAPF\n                    AGNLDSHYTFANFVEGRSNQLGLAAAIQAAQKPGDRAHNPLLLYGSTGLGKTHLMFAA\n                    GNALRQAKPAAKVMYLRSEQFFSAMIRALQDKAMDQFKRQFQQIDALLIDDIQFFAGK\n                    DRTQEEFFHTFNALFDGRQQIILTCDRYPREVEGLEPRLKSRLAWGLSVAIDPPDFET\n                    RAAIVLAKARERGAEIPDDVAFLIAKKMRSNVRDLEGALNTLVARANFTGRSITVEFA\n                    QETLRDLLRAQQQAIGIPNIQKTVADYYGLQMKDLLSKRRTRSLARPRQVAMALAKEL\n                    TEHSLPEIGDAFAGRDHTTVLHACRQIRTLMEADGKLREDWEKLIRKLSE\"\n    CDS             1607..2389\n                    /gene=\"dnaN_1\"\n                    /locus_tag=\"GBGACGDJ_00002\"\n                    /inference=\"ab initio prediction:Prodigal:002006\"\n                    /inference=\"similar to AA sequence:UniProtKB:Q9I7C4\"\n                    /codon_start=1\n                    /transl_table=11\n                    /product=\"Beta sliding clamp\"\n</code></pre> <p>Now let's have a look at the GFF output file:</p> <pre><code>head -10 prokka_out/assembly.gff\n</code></pre> Solution <pre><code>##gff-version 3\n##sequence-region contig_1_circular_rotated 1 4682534\ncontig_1_circular_rotated   Prodigal:002006 CDS 1   1329    .   +   0   ID=GBGACGDJ_00001;Name=dnaA;db_xref=COG:COG0593;gene=dnaA;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P03004;locus_tag=GBGACGDJ_00001;product=Chromosomal replication initiator protein DnaA\ncontig_1_circular_rotated   Prodigal:002006 CDS 1607    2389    .   +   0   ID=GBGACGDJ_00002;Name=dnaN_1;db_xref=COG:COG0592;gene=dnaN_1;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:Q9I7C4;locus_tag=GBGACGDJ_00002;product=Beta sliding clamp\ncontig_1_circular_rotated   Prodigal:002006 CDS 2346    2708    .   +   0   ID=GBGACGDJ_00003;Name=dnaN_2;db_xref=COG:COG0592;gene=dnaN_2;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A988;locus_tag=GBGACGDJ_00003;product=Beta sliding clamp\ncontig_1_circular_rotated   Prodigal:002006 CDS 3777    4883    .   +   0   ID=GBGACGDJ_00004;Name=recF;db_xref=COG:COG1195;gene=recF;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A7H0;locus_tag=GBGACGDJ_00004;product=DNA replication and repair protein RecF\ncontig_1_circular_rotated   Prodigal:002006 CDS 4999    7443    .   +   0   ID=GBGACGDJ_00005;eC_number=5.6.2.2;Name=gyrB;db_xref=COG:COG0187;gene=gyrB;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A2I3;locus_tag=GBGACGDJ_00005;product=DNA gyrase subunit B\ncontig_1_circular_rotated   Prodigal:002006 CDS 7511    8347    .   +   0   ID=GBGACGDJ_00006;inference=ab initio prediction:Prodigal:002006;locus_tag=GBGACGDJ_00006;product=hypothetical protein\ncontig_1_circular_rotated   Prodigal:002006 CDS 8579    9340    .   +   0   ID=GBGACGDJ_00007;eC_number=3.4.-.-;Name=bepA_1;gene=bepA_1;inference=ab initio prediction:Prodigal:002006,protein motif:HAMAP:MF_00997;locus_tag=GBGACGDJ_00007;product=Beta-barrel assembly-enhancing protease\ncontig_1_circular_rotated   Prodigal:002006 CDS 9617    10810   .   +   0   ID=GBGACGDJ_00008;inference=ab initio prediction:Prodigal:002006;locus_tag=GBGACGDJ_00008;product=hypothetical protein\n</code></pre> <p>Check that prokka assign a functional COG annotation in genbank or gff files.</p> <pre><code>grep COG prokka_out/assembly.gff | head -5\n</code></pre> Solution <pre><code>contig_1_circular_rotated   Prodigal:002006 CDS 1   1329    .   +   0   ID=GBGACGDJ_00001;Name=dnaA;db_xref=COG:COG0593;gene=dnaA;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P03004;locus_tag=GBGACGDJ_00001;product=Chromosomal replication initiator protein DnaA\ncontig_1_circular_rotated   Prodigal:002006 CDS 1607    2389    .   +   0   ID=GBGACGDJ_00002;Name=dnaN_1;db_xref=COG:COG0592;gene=dnaN_1;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:Q9I7C4;locus_tag=GBGACGDJ_00002;product=Beta sliding clamp\ncontig_1_circular_rotated   Prodigal:002006 CDS 2346    2708    .   +   0   ID=GBGACGDJ_00003;Name=dnaN_2;db_xref=COG:COG0592;gene=dnaN_2;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A988;locus_tag=GBGACGDJ_00003;product=Beta sliding clamp\ncontig_1_circular_rotated   Prodigal:002006 CDS 3777    4883    .   +   0   ID=GBGACGDJ_00004;Name=recF;db_xref=COG:COG1195;gene=recF;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A7H0;locus_tag=GBGACGDJ_00004;product=DNA replication and repair protein RecF\ncontig_1_circular_rotated   Prodigal:002006 CDS 4999    7443    .   +   0   ID=GBGACGDJ_00005;eC_number=5.6.2.2;Name=gyrB;db_xref=COG:COG0187;gene=gyrB;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A2I3;locus_tag=GBGACGDJ_00005;product=DNA gyrase subunit B\n</code></pre> <p>Using awk for extracting information, prepare two files named \"genes_plus.txt\" and \"genes_minus.txt\" for representing genes with Circos, located respectively in positive and negative strand. Circos input file must respect the following format with space separator <code>Chr start end</code></p> Solution <pre><code>awk {'if ($3 == \"CDS\" &amp;&amp; $7 == \"+\")print \"Chr \"$4\" \"$5'} prokka_out/assembly.gff &gt;genes_plus.txt\nawk {'if ($3 == \"CDS\" &amp;&amp; $7 == \"-\")print \"Chr \"$4\" \"$5'} prokka_out/assembly.gff &gt;genes_minus.txt\n</code></pre>"},{"location":"pages/training/#gc-content-analysis-skewit","title":"GC content analysis (SkewIT)","text":"<p>We will now use SkewIT for analyzing GC Skew.  </p> <p>GC skew is a statistical method for measuring strand-specific guanine overrepresentation. The GC skew is proven to be useful as the indicator of the DNA leading strand, lagging strand, replication origin, and replication terminal. The GC skew is positive and negative in the leading strand and in the lagging strand respectively; therefore, it is expected to see a switch in GC skew sign just at the point of DNA replication origin and terminus</p> <p>GC skew = (G - C)/(G + C)</p> <p>Let's start by creating and moving into a directory dedicated for the task:</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/skewit\ncd /scratch3/TP_bcg/$USER/training_bcg/skewit\nln -s /scratch3/TP_bcg/$USER/training_bcg/mob_recon/chromosome.fasta\n</code></pre> <p>Let's start by installing the tool:</p> <pre><code>git clone https://github.com/jenniferlu717/SkewIT.git\n</code></pre> <p>We can now run the analysis:</p> <pre><code>module load system/python/3.8.12\npython SkewIT/src/gcskew.py -i chromosome.fasta -o gcskew.txt -k 500\n</code></pre> <p>Let's have a look at the result:</p> <pre><code>head -5 gcskew.txt\n</code></pre> Solution <pre><code>Sequence    Index   GC Skew (0kb)\ncontig_1_circular_rotated   0   -0.05952381\ncontig_1_circular_rotated   500 0.00958466\ncontig_1_circular_rotated   1000    -0.00327869\ncontig_1_circular_rotated   1500    -0.01010101\n</code></pre> <p>Using awk, prepare a file named \"gcskew.circos.txt\" for representing GC skew with Circos  Circos input file must respect the following format with space separator <code>Chr position value</code> </p> Solution <pre><code>grep -v 'Sequence' gcskew.txt | awk {'print \"Chr \"$2\" \"$2+500\" \"$3'} &gt; gcskew.circos.txt\n</code></pre>"},{"location":"pages/training/#visualize-genome-annotation-using-circos","title":"Visualize genome annotation (using Circos)","text":"<p>Create a directory for circos and move into this directory dedicated for the task.</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/circos\ncd /scratch3/TP_bcg/$USER/training_bcg/circos\n</code></pre> <p>Install Circos by cloning the GitHub repository</p> <pre><code>git clone https://github.com/vigsterkr/circos.git\ncd circos\n./install-unix\ncd ..\n</code></pre> <p>Create a karyotype file for Circos, indicating the name, size (4.6Mb) and color of the chromosome.</p> <pre><code>echo \"chr - Chr 1 0 4600000 black\" &gt;karyotype.txt\n</code></pre> <p>Copy the template of circos configuration file located in the training material.</p> <pre><code>cp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/data/circos1.conf ./circos1.conf\n</code></pre> <p>Edit the Circos configuration file (circos1.conf) to adapt and customize your Circos image. </p> <p>Launch circos by specifying your circos configuration file with <code>-conf</code> option</p> <pre><code>circos/bin/circos -conf circos1.conf\n</code></pre> <p><pre><code>cp -rf circos.png circos1.png\n</code></pre> This should result in a circular representation of genes along your chromosome as two distinct tracks. An additional track shows the GC skew.</p> <p></p> <p>Exercise</p> <pre><code>Follow the same process to include a new track for tRNA in your Circos\n</code></pre>"},{"location":"pages/training/#retrieve-public-genomes-available-for-comparison","title":"Retrieve public genomes available for comparison","text":"<p>Public genomes can be retrived using NCBI :  https://www.ncbi.nlm.nih.gov/datasets/genomes/</p> <p>Questions</p> <pre><code>How many public genomes of Xanthomonas have been released in Genbank?\n\nHow many genomes are complete?\n</code></pre> <p>Alternatively, one can use the remote file to explore Genbank releases of genomes. https://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/prokaryotes.txt</p> <p>Let's start by creating a new directory \"public_genomes\" and moving into this directory dedicated for the task:</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/public_genomes\ncd /scratch3/TP_bcg/$USER/training_bcg/public_genomes\n</code></pre> <p>Using the wget command, retrieve the prokaryotes.txt file hosted at NCBI.</p> <p>Questions</p> <pre><code>Can we find the same number of Xanthomonas genomes from this file?  \nHow many public genomes of Xanthomonas oryzae species have been released in Genbank?  \nHow many genomes are complete?  \nHow many public complete genomes of Xanthomonas oryzae, pathovar oryzae are available?\n</code></pre> Solution <pre><code>wget https://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/prokaryotes.txt\n</code></pre> <pre><code>grep \"Xanthomonas\" prokaryotes.txt\n</code></pre> <pre><code>grep \"Xanthomonas\" prokaryotes.txt | grep -c 'chromosome:'\n</code></pre> <pre><code>grep \"Xanthomonas oryzae pv. oryzae\" prokaryotes.txt | grep -c 'chromosome:'\n</code></pre> <pre><code>grep \"Xanthomonas oryzae pv. oryzicola\" prokaryotes.txt | grep -c 'chromosome:'\n</code></pre> <p>Using metadata contained in the file, retrieve the genome files (fasta and annotations) of the first 3 complete genome of Xoo (Xanthomonas oryzae pv. oryzae) (as they appear in the file). Name each genome file with the prefix Xoo_</p> Solution <pre><code>grep \"Xanthomonas oryzae pv. oryzicola\" prokaryotes.txt | grep 'chromosome:' | head -3 \nXanthomonas oryzae pv. oryzicola    129394  PRJNA248159 248159  Proteobacteria  Gammaproteobacteria 4.43083 64.1    chromosome:NZ_CP007810.1/CP007810.1 -   1   4137    3486    2015/06/08  2021/11/23  Complete Genome Key Laboratory of Agricultural Biodiversity for Plant Disease Management under the Ministry of Education    SAMN02793996    GCA_001021915.1 REPR    ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/021/915/GCA_001021915.1_ASM102191v1  -   YM15\nXanthomonas oryzae pv. oryzicola    129394  PRJNA237971 237971  Proteobacteria  Gammaproteobacteria 5.0801  64  chromosome:NZ_CP007221.1/CP007221.1 -   1   4690    3924    2015/03/04  2022/01/21  Complete Genome Cornell University  SAMN02640212    GCA_000940825.1 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/940/825/GCA_000940825.1_ASM94082v1   27148456    CFBP7342\nXanthomonas oryzae pv. oryzicola    129394  PRJNA280380 280380  Proteobacteria  Gammaproteobacteria 5.01777 63.9    chromosome:NZ_CP011959.1/CP011959.1 -   1   4564    3815    2015/06/30  2021/11/23  Complete Genome Bogdanove Lab, Plant Pathology and Plant-Microbe Biology, Cornell University    SAMN03612287    GCA_001042835.1 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/042/835/GCA_001042835.1_ASM104283v1  -   CFBP7341\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/021/915/GCA_001021915.1_ASM102191v1/GCA_001021915.1_ASM102191v1_genomic.fna.gz -O Xoc_GCA_001021915.fna.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/940/825/GCA_000940825.1_ASM94082v1/GCA_000940825.1_ASM94082v1_genomic.fna.gz -O Xoc_GCA_000940825.fna.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/042/835/GCA_001042835.1_ASM104283v1/GCA_001042835.1_ASM104283v1_genomic.fna.gz -O Xoc_GCA_001042835.fna.gz\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/021/915/GCA_001021915.1_ASM102191v1/GCA_001021915.1_ASM102191v1_genomic.gbff.gz -O Xoc_GCA_001021915.gbff.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/940/825/GCA_000940825.1_ASM94082v1/GCA_000940825.1_ASM94082v1_genomic.gbff.gz -O Xoc_GCA_000940825.gbff.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/042/835/GCA_001042835.1_ASM104283v1/GCA_001042835.1_ASM104283v1_genomic.gbff.gz -O Xoc_GCA_001042835.gbff.gz\n</code></pre> <p>Do the same for retrieving the first 3 complete genomes of Xoc (Xanthomonas oryzae pv. oryzicola) with prefix Xoc_</p> Solution <pre><code>grep \"Xanthomonas oryzae pv. oryzae\" prokaryotes.txt | grep 'chromosome:' | head -3\n\nXanthomonas oryzae pv. oryzae   64187   PRJNA485465 485465  Proteobacteria  Gammaproteobacteria 4.99067 63.7    chromosome:NZ_CP031697.1/CP031697.1 -   1   4647    3652    2019/02/04  2022/03/27  Complete Genome Martin Luther University Halle-Wittenberg   SAMN09791860    GCA_004136375.1 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/136/375/GCA_004136375.1_ASM413637v1  -   ICMP3125\nXanthomonas oryzae pv. oryzae   64187   PRJNA269487 269487  Proteobacteria  Gammaproteobacteria 5.09305 63.7    chromosome:NZ_CP040687.1/CP040687.1 -   1   4757    3787    2019/05/28  2022/03/20  Complete Genome Bacterial Genomics and Evolution Laboratory, CSIR-Institute of Microbial Technology, Sector 39-A, Chandigarh, India SAMN03252586    GCA_001929235.2 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/929/235/GCA_001929235.2_ASM192923v2  -   IXO1088\nXanthomonas oryzae pv. oryzae   64187   PRJNA497605 497605  Proteobacteria  Gammaproteobacteria 5.05039 63.7    chromosome:NZ_CP033192.1/CP033192.1 -   1   4713    3695    2019/03/19  2022/04/07  Complete Genome University of Florida   SAMN10261817    GCA_004355825.1 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/355/825/GCA_004355825.1_ASM435582v1  -   NX0260\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/136/375/GCA_004136375.1_ASM413637v1/GCA_004136375.1_ASM413637v1_genomic.fna.gz -O Xoo_GCA_004136375.fna.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/929/235/GCA_001929235.2_ASM192923v2/GCA_001929235.2_ASM192923v2_genomic.fna.gz -O Xoo_GCA_001929235.fna.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/355/825/GCA_004355825.1_ASM435582v1/GCA_004355825.1_ASM435582v1_genomic.fna.gz -O Xoo_GCA_004355825.fna.gz\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/136/375/GCA_004136375.1_ASM413637v1/GCA_004136375.1_ASM413637v1_genomic.gbff.gz -O Xoo_GCA_004136375.gbff.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/929/235/GCA_001929235.2_ASM192923v2/GCA_001929235.2_ASM192923v2_genomic.gbff.gz -O Xoo_GCA_001929235.gbff.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/355/825/GCA_004355825.1_ASM435582v1/GCA_004355825.1_ASM435582v1_genomic.gbff.gz -O Xoo_GCA_004355825.gbff.gz\n</code></pre>"},{"location":"pages/training/#convert-genbank-annotation-files-to-gff-format","title":"Convert GenBank annotation files to GFF format","text":"<p>We will make use of Perl scripts for converting genbank files to GFF format: https://github.com/bioperl/bioperl-live.git</p> <p>Clone this repository and run the dedicated bp_genbank2gff3 tool on each of the 6 Xanthomonas genomes.</p> <pre><code>git clone https://github.com/bioperl/bioperl-live.git\nchmod 755 bioperl-live/bin/*\n</code></pre> <pre><code>perl bioperl-live/bin/bp_genbank2gff3 Xoo_GCA_004136375.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoo_GCA_001929235.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoo_GCA_004355825.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoc_GCA_001021915.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoc_GCA_000940825.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoc_GCA_001042835.gbff.gz\n</code></pre> <pre><code>mv Xo*gff annotations\n</code></pre> <p>Have a look into the content of a GFF file.</p>"},{"location":"pages/training/#comparison-between-2-genomes-with-minimap2-and-circos","title":"Comparison between 2 genomes (with Minimap2 and circos)","text":"<p>Compare 2 Xoo</p> <pre><code>gunzip Xoo*fna.gz\n</code></pre> <pre><code>ls Xoo*fna\n</code></pre> <p>Using minimap2, compare 2 genomes of Xoo (Xanthomonas oryzae pv.oryzae): Xoo_GCA_001929235 and Xoo_GCA_004136375.  </p> <p>Generate an output in paf format named \"minimap2.paf\".</p> Solution <pre><code>module load bioinfo/minimap2/2.24\nminimap2 Xoo_GCA_001929235.fna Xoo_GCA_004136375.fna -o minimap2.paf\n</code></pre> <p>Exercises</p> <pre><code>Using awk command applied on the paf output of minimap2, we can try to filter matches between the two genomes in oreder to visualize connections with circos. Generate a new file named \"links.txt\" that contains links between the two genomes. \nOn the other hand, in order to highlight inversion, do the same for matches that are inverted between the two genomes.\n</code></pre> Solution <pre><code>awk {'if (($4-$3)&gt;100000 &amp;&amp; ($5 ==\"+\"))print NR-1\" \"$1\" \"$3\" \"$4\"\\n\"NR-1\" \"$6\" \"$8\" \"$9'} minimap2.paf &gt;links.txt\nawk {'if (($4-$3)&gt;100000 &amp;&amp; ($5 ==\"-\"))print NR-1\" \"$1\" \"$3\" \"$4\"\\n\"NR-1\" \"$6\" \"$9\" \"$8'} minimap2.paf &gt;links_inverted.txt\n</code></pre> <p>Visualize matches between genomes with Circos</p> <p>We will use and adapt a template for circos configuration file for visualizing circos with links.</p> <pre><code>cp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/data/circos2.conf circos2.conf\n</code></pre> <p>Edit the Circos configuration file to add informations about links</p> Solution <pre><code>&lt;link segdup-bundle34&gt;\nz            = 50\ncolor        = nyt_red\nthickness    = 3\nfile         = /scratch3/TP_bcg/$USER/training_bcg/public_genomes/links.txt\nbezier_radius_purity = 0.2\nribbon      = yes\ncrest = 1\n&lt;/link&gt;\n\n&lt;link segdup-bundle35&gt;\nz            = 50\ncolor        = nyt_blue\nthickness    = 3\nfile         = /scratch3/TP_bcg/$USER/training_bcg/public_genomes/links_inverted.txt\nbezier_radius_purity = 0.2\nribbon      = yes\ncrest = 1\n&lt;/link&gt;\n</code></pre> <p>Edit a karyotype file with the two genomes and their size</p> <p>Make one of the genome in the opposite way by entering this line in the Circos configuration file</p> <p>chromosomes_reverse = CP040687.1</p> <p>Launch circos for visualization</p> <pre><code>circos/bin/circos -conf circos2.conf\n</code></pre> <p></p> <p>Alternatively, you can align the two Xoo genomes with the web application DGenies for displaying dot plot large genomes in an interactive, efficient and simple way https://dgenies.toulouse.inra.fr/run</p> <p>Do the same process for the comparing one Xoo and one Xoc</p>"},{"location":"pages/training/#compare-genome-similarity-using-average-nucleotide-identity-ani-fastani","title":"Compare genome similarity using Average Nucleotide Identity (ANI) (fastANI)","text":"<p>Go to the directory \"public_genomes\"</p> <pre><code>cd /scratch3/TP_bcg/$USER/training_bcg/public_genomes\n</code></pre> <p>Create a file that contains the list of genomes to be taken as input</p> <pre><code>ls Xo*fna* &gt;list_genomes.txt\n</code></pre> <pre><code>module load bioinfo/fastani/1.33\nfastANI --rl list_genomes.txt --ql list_genomes.txt -o fastani.out --matrix\n</code></pre> <p>Check that genomes are closer within the same pathovar than between pathovars.</p> <p>Questions</p> <pre><code>Which are the closest genomes?\n</code></pre> Solution <p><pre><code>more fastani.out.matrix \n</code></pre> <pre><code>6  \nXoc_GCA_000940825.fna  \nXoc_GCA_001021915.fna   99.149597  \nXoc_GCA_001042835.fna   99.411034   99.196701  \nXoo_GCA_001929235.fna   97.226959   97.219826   97.288483  \nXoo_GCA_004136375.fna   97.313660   97.230530   97.365417   99.582520  \nXoo_GCA_004355825.fna   97.236938   97.235214   97.313324   99.704956   99.590271  \n</code></pre></p> <p>How to visualize ANI as heatmap matrix?</p> <pre><code>cp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/scripts/convertANI.pl .\ncp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/scripts/heatmaply.R .\nperl convertANI.pl fastani.out.matrix &gt;fastani.out.matrix.completed\n</code></pre> <p>Install using the R interface the library optparse and heatmaply</p> <pre><code>module load bioinfo/R/4.2.2\nR\n</code></pre> <pre><code>install.packages(\"optparse\")\ninstall.packages(\"heatmaply\")\nquit()\n</code></pre> <p>Launch the R script to generate a figure showing a heatmap of ANI values</p> <pre><code>Rscript heatmaply.R -f fastani.out.matrix.completed\n</code></pre> <p>It generates a HTML output showing a heatmap of ANI values for each genome pairwise comparison.</p> <p></p> <p>Try to make the same process including our newly assembled genome</p>"},{"location":"pages/training/#gene-content-comparison-pangenome-analysis-using-roary","title":"Gene content comparison / Pangenome analysis (using Roary)","text":"<p>Have a look to the help page of the roary program.</p> <pre><code>cd /scratch3/TP_bcg/$USER/training_bcg\nmodule load bioinfo/roary/3.12.0\nroary --help\n</code></pre> <p>Launch roary for comparing the gene content of the 6 genomes.</p> <pre><code>roary -f roary_out public_genomes/*gff\n</code></pre> <p>Look at the content of the roary output:</p> <ul> <li> <p>Gene presence absence file</p> </li> <li> <p>summary statistics</p> </li> </ul> <pre><code>head -10 roary_out/gene_presence_absence.csv  \n\"Gene\",\"Non-unique Gene name\",\"Annotation\",\"No. isolates\",\"No. sequences\",\"Avg sequences per isolate\",\"Genome Fragment\",\"Order within Fragment\",\"Accessory Fragment\",\"Accessory Order with Fragment\",\"QC\",\"Min group size nuc\",\"Max group size nuc\",\"Avg group size nuc\",\"Xoc_GCA_000940825.gbff.gz\",\"Xoc_GCA_001021915.gbff.gz\",\"Xoc_GCA_001042835.gbff.gz\",\"Xoo_GCA_001929235.gbff.gz\",\"Xoo_GCA_004136375.gbff.gz\",\"Xoo_GCA_004355825.gbff.gz\"\n\"IXO1088_008755\",\"\",\"response regulator\",\"6\",\"6\",\"1\",\"1\",\"1683\",\"\",\"\",\"\",\"404\",\"404\",\"404\",\"BE73_06245.p01\",\"FE36_14125.p01\",\"ACU17_06495.p01\",\"10bd397a0f88aca11976f4a4f6631125_6321\",\"4e95a45ca635958849417c3d368d746d_7522\",\"cc532a0030968c6887cea9dec5a101c0_11970\"\n\"IXO1088_008760\",\"\",\"hypothetical protein\",\"6\",\"6\",\"1\",\"1\",\"1682\",\"\",\"\",\"\",\"497\",\"497\",\"497\",\"BE73_06250.p01\",\"FE36_14120.p01\",\"ACU17_06500.p01\",\"10bd397a0f88aca11976f4a4f6631125_6325\",\"4e95a45ca635958849417c3d368d746d_7526\",\"cc532a0030968c6887cea9dec5a101c0_11966\"\n\"EBA21_16420\",\"\",\"hypothetical protein\",\"6\",\"6\",\"1\",\"1\",\"1673\",\"\",\"\",\"\",\"512\",\"512\",\"512\",\"BE73_06290.p01\",\"FE36_14080.p01\",\"ACU17_06540.p01\",\"10bd397a0f88aca11976f4a4f6631125_6351\",\"4e95a45ca635958849417c3d368d746d_7554\",\"cc532a0030968c6887cea9dec5a101c0_11934\"\n\"pqqD\",\"\",\"pyrroloquinoline quinone biosynthesis peptide chaperone PqqD\",\"6\",\"6\",\"1\",\"1\",\"1671\",\"\",\"\",\"\",\"278\",\"278\",\"278\",\"BE73_06300.p01\",\"FE36_14070.p01\",\"ACU17_06550.p01\",\"10bd397a0f88aca11976f4a4f6631125_6359\",\"4e95a45ca635958849417c3d368d746d_7562\",\"cc532a0030968c6887cea9dec5a101c0_11926\"\n\"pqqB\",\"\",\"pyrroloquinoline quinone biosynthesis protein PqqB\",\"6\",\"6\",\"1\",\"1\",\"1669\",\"\",\"\",\"\",\"899\",\"899\",\"899\",\"BE73_06310.p01\",\"FE36_14060.p01\",\"ACU17_06560.p01\",\"10bd397a0f88aca11976f4a4f6631125_6367\",\"4e95a45ca635958849417c3d368d746d_7570\",\"cc532a0030968c6887cea9dec5a101c0_11918\"\n\"DZA53_10525\",\"\",\"hypothetical protein\",\"6\",\"6\",\"1\",\"1\",\"1664\",\"\",\"\",\"\",\"524\",\"524\",\"524\",\"BE73_06335.p01\",\"FE36_14035.p01\",\"ACU17_06585.p01\",\"10bd397a0f88aca11976f4a4f6631125_6391\",\"4e95a45ca635958849417c3d368d746d_7594\",\"cc532a0030968c6887cea9dec5a101c0_11894\"\n\"DZA53_10545\",\"\",\"energy transducer TonB\",\"6\",\"6\",\"1\",\"1\",\"1661\",\"\",\"\",\"\",\"875\",\"875\",\"875\",\"BE73_06355.p01\",\"FE36_14015.p01\",\"ACU17_06605.p01\",\"10bd397a0f88aca11976f4a4f6631125_6407\",\"4e95a45ca635958849417c3d368d746d_7610\",\"cc532a0030968c6887cea9dec5a101c0_11878\"\n\"DZA53_10580\",\"\",\"chemotaxis protein\",\"6\",\"6\",\"1\",\"1\",\"1654\",\"\",\"\",\"\",\"1202\",\"1208\",\"1205\",\"BE73_06390.p01\",\"FE36_13980.p01\",\"ACU17_06640.p01\",\"10bd397a0f88aca11976f4a4f6631125_6435\",\"4e95a45ca635958849417c3d368d746d_7638\",\"cc532a0030968c6887cea9dec5a101c0_11850\"\n\"ACU17_06675\",\"\",\"copper homeostasis protein CutC\",\"6\",\"6\",\"1\",\"1\",\"1646\",\"\",\"\",\"\",\"731\",\"731\",\"731\",\"BE73_06425.p01\",\"FE36_13950.p01\",\"ACU17_06675.p01\",\"10bd397a0f88aca11976f4a4f6631125_6467\",\"4e95a45ca635958849417c3d368d746d_7672\",\"cc532a0030968c6887cea9dec5a101c0_11818\"\n</code></pre> <pre><code>more roary_out/summary_statistics.txt  \nCore genes  (99% &lt;= strains &lt;= 100%)    2565\nSoft core genes (95% &lt;= strains &lt; 99%)  0\nShell genes (15% &lt;= strains &lt; 95%)  3763\nCloud genes (0% &lt;= strains &lt; 15%)   0\nTotal genes (0% &lt;= strains &lt;= 100%) 6328\n</code></pre> <p>In order to explore and represent graphs with roary outputs, we will make use of scripts available in Roary repository.</p> <pre><code>git clone https://github.com/sanger-pathogens/Roary.git\n</code></pre> <pre><code>python Roary/contrib/roary_plots/roary_plots.py roary_out/accessory_binary_genes.fa.newick roary_out/gene_presence_absence.csv\n</code></pre> <pre><code>query_pan_genome -g roary_out/clustered_proteins -a difference --input_set_one public_genomes/Xoc_GCA_000940825.gbff.gz.gff,public_genomes/Xoc_GCA_001021915.gbff.gz.gff,public_genomes/Xoc_GCA_001021915.gbff.gz.gff --input_set_two public_genomes/Xoo_GCA_001929235.gbff.gz.gff,public_genomes/Xoo_GCA_004136375.gbff.gz.gff,public_genomes/Xoo_GCA_004355825.gbff.gz.gff\n</code></pre> <p> </p>"},{"location":"pages/training/#association-tests-with-metadata-pan-gwas-with-scoary","title":"Association tests with metadata (Pan-GWAS) (with Scoary)","text":"<p>Scoary is designed to take the gene_presence_absence.csv file from Roary as well as a traits file created by the user and calculate the assocations between all genes in the accessory genome and the traits. It reports a list of genes sorted by strength of association per trait.  </p> <p>For this task, we will use a larger file precalculated with Roary for the comparison of 90 strains. For each strain, we collected the pathovar information and we will use it to define genes potentially associated with pathovar Xoo/Xoc.</p> <pre><code>cp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/data/pangenome_100xantho /scratch3/TP_bcg/$USER/training_bcg\ncd /scratch3/TP_bcg/$USER/training_bcg/pangenome_100xantho\n</code></pre> <p>Look into the input files gene_presence_absence.csv and traits.txt  </p> <pre><code>more gene_presence_absence.csv\n</code></pre> <pre><code>more traits.txt\n</code></pre> <p>Look at the help page of scoary and run it for defining genes associated with pathovar.</p> <pre><code>module load bioinfo/scoary/1.6.16\nscoary -t traits.txt -g gene_presence_absence.csv\n</code></pre> <p>Questions</p> <pre><code>Considering a p-value threshold 0.01, how many gene clusters are associated with pathovar?  \nHow many clusters are specifically present in pathovar oryzae (absent in oryzicola)?  \nHow many clusters are specifically present in pathovar oryzicola (absent in oryzae)?\n</code></pre> Solution <pre><code>awk -F \"\\\",\\\"\" {'if ($12&lt;0.01)print $_'} pathovar_*.results.csv | wc -l\n</code></pre> <pre><code>awk -F \"\\\",\\\"\" {'if ($4==0 &amp;&amp; $5==75)print $_'} pathovar_*.results.csv | wc -l\n</code></pre> <pre><code>awk -F \"\\\",\\\"\" {'if ($4==15 &amp;&amp; $5==0)print $_'} pathovar_*.results.csv | wc -l\n</code></pre>"},{"location":"pages/training/#explore-pan-genome-with-panexplorer-web-application","title":"Explore pan-genome with PanExplorer web application","text":"<p>Upload your 6 genomes into the web application and choose the PanACoTA software for pangenome reconstruction. https://panexplorer.southgreen.fr/</p> <p></p> <p>Exercises</p> <pre><code>How many genes are strain-specific of each of the 3 Xoo strains?\n</code></pre>"},{"location":"pages/training/#construct-a-pangenome-graph-using-minigraph2","title":"Construct a pangenome graph (using minigraph2)","text":"<p>Pangenome analysis based on gene clustering approach will result in a pangene atlas, construction of a presence/absence matrix of genes.  </p> <p>Pangenome can also be reconstructed directly on genomic sequences using pangenome graph approach using minigraph2.</p> <pre><code>cd /scratch3/TP_bcg/$USER/training_bcg/public_genomes\nmodule load bioinfo/minigraph/0.15\nminigraph -xggs -t16 Xoo_GCA_001929235.fna Xoo_GCA_004136375.fna &gt;Xoo_pangenome.gfa\n</code></pre> <p>Convert GFA into FASTA of the pangenome</p> <pre><code>module load bioinfo/gfatools/0.5\ngfatools gfa2fa -s Xoo_pangenome.gfa &gt;Xoo_pangenome.fa\n</code></pre> <p>Download the bandage software and load the GFA pangenome graph to be visualized</p> <p></p>"},{"location":"pages/training_2025/","title":"Handsome bacterial comparative genomics","text":""},{"location":"pages/training_2025/#first-commands-for-preparing-the-working-environment","title":"First commands for preparing the working environment","text":"<p>First create your working directory:</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg\ncd /scratch3/TP_bcg/$USER/training_bcg\n</code></pre> <p>We can now download the git repository of this training that contains material needed for the training.</p> <pre><code>git clone https://github.com/SouthGreenPlatform/training_bacterial_comparative_genomics.git\n</code></pre> <p>We also need some raw data:</p> <pre><code>mkdir raw_data\ncd raw_data\nwget https://panexplorer.southgreen.fr/data/mysample.fastq.gz\n</code></pre> <p>Question</p> <pre><code>Using a unix command, count how many reads are in the raw Fastq file?\n</code></pre> Solution <pre><code>zgrep -c 'barcode=' mysample.fastq.gz\n</code></pre>"},{"location":"pages/training_2025/#separate-chromosomal-and-plasmid-scaffolds-using-mob-suite","title":"Separate chromosomal and plasmid scaffolds (using MOB-Suite)","text":"<p>Let's start by creating and moving into a directory dedicated for the task:</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/mob_recon\ncd /scratch3/TP_bcg/$USER/training_bcg/mob_recon\n</code></pre> <p>We will run MOB-suite using a singularity image. </p> <p>Run the <code>mob_recon</code> utility using singularity image (<code>/scratch3/TP_bcg/mob_suite_3.0.3.sif</code>) to separate chromosome and plasmid contigs First, load the appropriate module for running singularity Use the <code>--bind</code> option to bind your current directory on the host to <code>/mnt</code> in the container</p> <pre><code>module load system/singularity/3.6.0\ncp -rf /scratch3/TP_bcg/mob_suite_3.0.3.sif .\ncp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/data/precomputed_assembly/assembly_precomputed.fasta .\nsingularity exec --bind /scratch3/TP_bcg/$USER/training_bcg/mob_recon/:/tmp mob_suite_3.0.3.sif mob_recon -i /tmp/assembly_precomputed.fasta -o /tmp/assembly.mob_recon\n</code></pre> <p>The results is made by 4 files <code>chromosome.fasta  contig_report.txt  mobtyper_results.txt  plasmid_AD399.fasta</code></p> <p>We can have a look at the report:</p> <p>Question</p> <pre><code>Looking at the MOB-SUITE report, does our sequenced sample contain plasmid sequence?\n</code></pre> Solution <p><pre><code>more assembly.mob_recon/contig_report.txt\n</code></pre> <pre><code>sample_id   molecule_type   primary_cluster_id  secondary_cluster_id    contig_id   size    gc  md5 circularity_status  rep_type(s) rep_type_accession(s)   relaxase_type(s)    relaxase_type_accession(s)  mpf_type    mpf_type_accession(s)   orit_type(s)    orit_accession(s)   predicted_mobility  mash_nearest_neighbor   mash_neighbor_distance  mash_neighbor_identification    repetitive_dna_id   repetitive_dna_type filtering_reason\nassembly_precomputed    chromosome  -   -   contig_1_circular_rotated   4682534 63.833983907004196  cf955654136e9041810a80b8191fa41f    not tested  -   -   MOBP    NC_007507_00032 -   -   -   -   -   -   -   -   -   -   -\nassembly_precomputed    plasmid AD399   -   contig_2_circular_rotated   69058   61.861044339540676  475037e138b4ade1836aa05f421c47b8    not tested  rep_cluster_1289    000607__CP000620_00033  MOBP    CP022994_00148  -   -   -   -   -   CP033195    0.0537328   Xanthomonas oryzae pv. oryzae   -   -   -\n</code></pre></p>"},{"location":"pages/training_2025/#genome-annotation-using-prokka","title":"Genome annotation (using Prokka)","text":"<p>We will now annotate the chromosome. Let's start by creating and moving into a directory dedicated for the task.  </p> <p>Annotation will be performed on the chromosome file only (not plasmid). A symbolic link can be created to have the chromosome.fasta file in the current directory.</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/prokka\ncd /scratch3/TP_bcg/$USER/training_bcg/prokka\nln -s /scratch3/TP_bcg/$USER/training_bcg/mob_recon/assembly.mob_recon/chromosome.fasta\n</code></pre> <p>We will use Prokka to perform the genome annotation. Load the appropriate module for prokka (module load) or install the tool locally with conda</p> <pre><code>module load bioinfo/prokka/1.14.6\n</code></pre> <p>or</p> <pre><code>conda create -n prokka -c conda-forge -c bioconda prokka\nconda activate prokka\n</code></pre> <p>List the database that will be used by prokka for annotation</p> <pre><code>prokka --listdb\n</code></pre> <p>We can now launch the annotation: </p> <pre><code>prokka chromosome.fasta --prefix assembly --force --outdir prokka_out &gt;&gt; prokka.log 2&gt;&amp;1\n</code></pre> <p>You can now deactivate the prokka conda environment</p> <pre><code>conda deactivate\n</code></pre> <p>Let's have a look at the Genebank output file:</p> <pre><code>head -40 prokka_out/assembly.gbk\n</code></pre> Solution <pre><code>LOCUS       contig_1_circular_rotated4682534 bp   DNA  linear       10-JUN-2022\nDEFINITION  Genus species strain strain.\nACCESSION   \nVERSION\nKEYWORDS    .\nSOURCE      Genus species\nORGANISM  Genus species\n            Unclassified.\nCOMMENT     Annotated using prokka 1.14.6 from\n            https://github.com/tseemann/prokka.\nFEATURES             Location/Qualifiers\n    source          1..4682534\n                    /organism=\"Genus species\"\n                    /mol_type=\"genomic DNA\"\n                    /strain=\"strain\"\n    CDS             1..1329\n                    /gene=\"dnaA\"\n                    /locus_tag=\"GBGACGDJ_00001\"\n                    /inference=\"ab initio prediction:Prodigal:002006\"\n                    /inference=\"similar to AA sequence:UniProtKB:P03004\"\n                    /codon_start=1\n                    /transl_table=11\n                    /product=\"Chromosomal replication initiator protein DnaA\"\n                    /db_xref=\"COG:COG0593\"\n                    /translation=\"MDAWPRCLERLEAEFPPEDVHTWLKPLQAEDRGDSIVLYAPNAF\n                    IVDQVRERYLPRIRELLAYFAGNREVALAVGSRPRAPEPEPAPVAATIAPQAAPIAPF\n                    AGNLDSHYTFANFVEGRSNQLGLAAAIQAAQKPGDRAHNPLLLYGSTGLGKTHLMFAA\n                    GNALRQAKPAAKVMYLRSEQFFSAMIRALQDKAMDQFKRQFQQIDALLIDDIQFFAGK\n                    DRTQEEFFHTFNALFDGRQQIILTCDRYPREVEGLEPRLKSRLAWGLSVAIDPPDFET\n                    RAAIVLAKARERGAEIPDDVAFLIAKKMRSNVRDLEGALNTLVARANFTGRSITVEFA\n                    QETLRDLLRAQQQAIGIPNIQKTVADYYGLQMKDLLSKRRTRSLARPRQVAMALAKEL\n                    TEHSLPEIGDAFAGRDHTTVLHACRQIRTLMEADGKLREDWEKLIRKLSE\"\n    CDS             1607..2389\n                    /gene=\"dnaN_1\"\n                    /locus_tag=\"GBGACGDJ_00002\"\n                    /inference=\"ab initio prediction:Prodigal:002006\"\n                    /inference=\"similar to AA sequence:UniProtKB:Q9I7C4\"\n                    /codon_start=1\n                    /transl_table=11\n                    /product=\"Beta sliding clamp\"\n</code></pre> <p>Now let's have a look at the GFF output file:</p> <pre><code>head -10 prokka_out/assembly.gff\n</code></pre> Solution <pre><code>##gff-version 3\n##sequence-region contig_1_circular_rotated 1 4682534\ncontig_1_circular_rotated   Prodigal:002006 CDS 1   1329    .   +   0   ID=GBGACGDJ_00001;Name=dnaA;db_xref=COG:COG0593;gene=dnaA;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P03004;locus_tag=GBGACGDJ_00001;product=Chromosomal replication initiator protein DnaA\ncontig_1_circular_rotated   Prodigal:002006 CDS 1607    2389    .   +   0   ID=GBGACGDJ_00002;Name=dnaN_1;db_xref=COG:COG0592;gene=dnaN_1;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:Q9I7C4;locus_tag=GBGACGDJ_00002;product=Beta sliding clamp\ncontig_1_circular_rotated   Prodigal:002006 CDS 2346    2708    .   +   0   ID=GBGACGDJ_00003;Name=dnaN_2;db_xref=COG:COG0592;gene=dnaN_2;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A988;locus_tag=GBGACGDJ_00003;product=Beta sliding clamp\ncontig_1_circular_rotated   Prodigal:002006 CDS 3777    4883    .   +   0   ID=GBGACGDJ_00004;Name=recF;db_xref=COG:COG1195;gene=recF;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A7H0;locus_tag=GBGACGDJ_00004;product=DNA replication and repair protein RecF\ncontig_1_circular_rotated   Prodigal:002006 CDS 4999    7443    .   +   0   ID=GBGACGDJ_00005;eC_number=5.6.2.2;Name=gyrB;db_xref=COG:COG0187;gene=gyrB;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A2I3;locus_tag=GBGACGDJ_00005;product=DNA gyrase subunit B\ncontig_1_circular_rotated   Prodigal:002006 CDS 7511    8347    .   +   0   ID=GBGACGDJ_00006;inference=ab initio prediction:Prodigal:002006;locus_tag=GBGACGDJ_00006;product=hypothetical protein\ncontig_1_circular_rotated   Prodigal:002006 CDS 8579    9340    .   +   0   ID=GBGACGDJ_00007;eC_number=3.4.-.-;Name=bepA_1;gene=bepA_1;inference=ab initio prediction:Prodigal:002006,protein motif:HAMAP:MF_00997;locus_tag=GBGACGDJ_00007;product=Beta-barrel assembly-enhancing protease\ncontig_1_circular_rotated   Prodigal:002006 CDS 9617    10810   .   +   0   ID=GBGACGDJ_00008;inference=ab initio prediction:Prodigal:002006;locus_tag=GBGACGDJ_00008;product=hypothetical protein\n</code></pre> <p>Check that prokka assign a functional COG annotation in genbank or gff files.</p> <pre><code>grep COG prokka_out/assembly.gff | head -5\n</code></pre> Solution <pre><code>contig_1_circular_rotated   Prodigal:002006 CDS 1   1329    .   +   0   ID=GBGACGDJ_00001;Name=dnaA;db_xref=COG:COG0593;gene=dnaA;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P03004;locus_tag=GBGACGDJ_00001;product=Chromosomal replication initiator protein DnaA\ncontig_1_circular_rotated   Prodigal:002006 CDS 1607    2389    .   +   0   ID=GBGACGDJ_00002;Name=dnaN_1;db_xref=COG:COG0592;gene=dnaN_1;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:Q9I7C4;locus_tag=GBGACGDJ_00002;product=Beta sliding clamp\ncontig_1_circular_rotated   Prodigal:002006 CDS 2346    2708    .   +   0   ID=GBGACGDJ_00003;Name=dnaN_2;db_xref=COG:COG0592;gene=dnaN_2;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A988;locus_tag=GBGACGDJ_00003;product=Beta sliding clamp\ncontig_1_circular_rotated   Prodigal:002006 CDS 3777    4883    .   +   0   ID=GBGACGDJ_00004;Name=recF;db_xref=COG:COG1195;gene=recF;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A7H0;locus_tag=GBGACGDJ_00004;product=DNA replication and repair protein RecF\ncontig_1_circular_rotated   Prodigal:002006 CDS 4999    7443    .   +   0   ID=GBGACGDJ_00005;eC_number=5.6.2.2;Name=gyrB;db_xref=COG:COG0187;gene=gyrB;inference=ab initio prediction:Prodigal:002006,similar to AA sequence:UniProtKB:P0A2I3;locus_tag=GBGACGDJ_00005;product=DNA gyrase subunit B\n</code></pre> <p>Using awk for extracting information, prepare two files named \"genes_plus.txt\" and \"genes_minus.txt\" for representing genes with Circos, located respectively in positive and negative strand. Circos input file must respect the following format with space separator <code>Chr start end</code></p> Solution <pre><code>awk {'if ($3 == \"CDS\" &amp;&amp; $7 == \"+\")print \"Chr \"$4\" \"$5'} prokka_out/assembly.gff &gt;genes_plus.txt\nawk {'if ($3 == \"CDS\" &amp;&amp; $7 == \"-\")print \"Chr \"$4\" \"$5'} prokka_out/assembly.gff &gt;genes_minus.txt\n</code></pre>"},{"location":"pages/training_2025/#gc-content-analysis-skewit","title":"GC content analysis (SkewIT)","text":"<p>We will now use SkewIT for analyzing GC Skew.  </p> <p>GC skew is a statistical method for measuring strand-specific guanine overrepresentation. The GC skew is proven to be useful as the indicator of the DNA leading strand, lagging strand, replication origin, and replication terminal. The GC skew is positive and negative in the leading strand and in the lagging strand respectively; therefore, it is expected to see a switch in GC skew sign just at the point of DNA replication origin and terminus</p> <p>GC skew = (G - C)/(G + C)</p> <p>Let's start by creating and moving into a directory dedicated for the task:</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/skewit\ncd /scratch3/TP_bcg/$USER/training_bcg/skewit\nln -s /scratch3/TP_bcg/$USER/training_bcg/mob_recon/chromosome.fasta\n</code></pre> <p>Let's start by installing the tool:</p> <pre><code>git clone https://github.com/jenniferlu717/SkewIT.git\n</code></pre> <p>We can now run the analysis:</p> <pre><code>module load system/python/3.8.12\npython SkewIT/src/gcskew.py -i chromosome.fasta -o gcskew.txt -k 500\n</code></pre> <p>Let's have a look at the result:</p> <pre><code>head -5 gcskew.txt\n</code></pre> Solution <pre><code>Sequence    Index   GC Skew (0kb)\ncontig_1_circular_rotated   0   -0.05952381\ncontig_1_circular_rotated   500 0.00958466\ncontig_1_circular_rotated   1000    -0.00327869\ncontig_1_circular_rotated   1500    -0.01010101\n</code></pre> <p>Using awk, prepare a file named \"gcskew.circos.txt\" for representing GC skew with Circos  Circos input file must respect the following format with space separator <code>Chr position value</code> </p> Solution <pre><code>grep -v 'Sequence' gcskew.txt | awk {'print \"Chr \"$2\" \"$2+500\" \"$3'} &gt; gcskew.circos.txt\n</code></pre>"},{"location":"pages/training_2025/#visualize-genome-annotation-using-circos","title":"Visualize genome annotation (using Circos)","text":"<p>Create a directory for circos and move into this directory dedicated for the task.</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/circos\ncd /scratch3/TP_bcg/$USER/training_bcg/circos\n</code></pre> <p>Install Circos by cloning the GitHub repository</p> <pre><code>git clone https://github.com/vigsterkr/circos.git\ncd circos\n./install-unix\ncd ..\n</code></pre> <p>Create a karyotype file for Circos, indicating the name, size (4.6Mb) and color of the chromosome.</p> <pre><code>echo \"chr - Chr 1 0 4600000 black\" &gt;karyotype.txt\n</code></pre> <p>Copy the template of circos configuration file located in the training material.</p> <pre><code>cp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/data/circos1.conf ./circos1.conf\n</code></pre> <p>Edit the Circos configuration file (circos1.conf) to adapt and customize your Circos image. </p> <p>Launch circos by specifying your circos configuration file with <code>-conf</code> option</p> <pre><code>circos/bin/circos -conf circos1.conf\n</code></pre> <p><pre><code>cp -rf circos.png circos1.png\n</code></pre> This should result in a circular representation of genes along your chromosome as two distinct tracks. An additional track shows the GC skew.</p> <p></p> <p>Exercise</p> <pre><code>Follow the same process to include a new track for tRNA in your Circos\n</code></pre>"},{"location":"pages/training_2025/#retrieve-public-genomes-available-for-comparison","title":"Retrieve public genomes available for comparison","text":"<p>Public genomes can be retrived using NCBI :  https://www.ncbi.nlm.nih.gov/datasets/genomes/</p> <p>Questions</p> <pre><code>How many public genomes of Xanthomonas have been released in Genbank?\n\nHow many genomes are complete?\n</code></pre> <p>Alternatively, one can use the remote file to explore Genbank releases of genomes. https://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/prokaryotes.txt</p> <p>Let's start by creating a new directory \"public_genomes\" and moving into this directory dedicated for the task:</p> <pre><code>mkdir -p /scratch3/TP_bcg/$USER/training_bcg/public_genomes\ncd /scratch3/TP_bcg/$USER/training_bcg/public_genomes\n</code></pre> <p>Using the wget command, retrieve the prokaryotes.txt file hosted at NCBI.</p> <p>Questions</p> <pre><code>Can we find the same number of Xanthomonas genomes from this file?  \nHow many public genomes of Xanthomonas oryzae species have been released in Genbank?  \nHow many genomes are complete?  \nHow many public complete genomes of Xanthomonas oryzae, pathovar oryzae are available?\n</code></pre> Solution <pre><code>wget https://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/prokaryotes.txt\n</code></pre> <pre><code>grep \"Xanthomonas\" prokaryotes.txt\n</code></pre> <pre><code>grep \"Xanthomonas\" prokaryotes.txt | grep -c 'chromosome:'\n</code></pre> <pre><code>grep \"Xanthomonas oryzae pv. oryzae\" prokaryotes.txt | grep -c 'chromosome:'\n</code></pre> <pre><code>grep \"Xanthomonas oryzae pv. oryzicola\" prokaryotes.txt | grep -c 'chromosome:'\n</code></pre> <p>Using metadata contained in the file, retrieve the genome files (fasta and annotations) of the first 3 complete genome of Xoo (Xanthomonas oryzae pv. oryzae) (as they appear in the file). Name each genome file with the prefix Xoo_</p> Solution <pre><code>grep \"Xanthomonas oryzae pv. oryzicola\" prokaryotes.txt | grep 'chromosome:' | head -3 \nXanthomonas oryzae pv. oryzicola    129394  PRJNA248159 248159  Proteobacteria  Gammaproteobacteria 4.43083 64.1    chromosome:NZ_CP007810.1/CP007810.1 -   1   4137    3486    2015/06/08  2021/11/23  Complete Genome Key Laboratory of Agricultural Biodiversity for Plant Disease Management under the Ministry of Education    SAMN02793996    GCA_001021915.1 REPR    ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/021/915/GCA_001021915.1_ASM102191v1  -   YM15\nXanthomonas oryzae pv. oryzicola    129394  PRJNA237971 237971  Proteobacteria  Gammaproteobacteria 5.0801  64  chromosome:NZ_CP007221.1/CP007221.1 -   1   4690    3924    2015/03/04  2022/01/21  Complete Genome Cornell University  SAMN02640212    GCA_000940825.1 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/940/825/GCA_000940825.1_ASM94082v1   27148456    CFBP7342\nXanthomonas oryzae pv. oryzicola    129394  PRJNA280380 280380  Proteobacteria  Gammaproteobacteria 5.01777 63.9    chromosome:NZ_CP011959.1/CP011959.1 -   1   4564    3815    2015/06/30  2021/11/23  Complete Genome Bogdanove Lab, Plant Pathology and Plant-Microbe Biology, Cornell University    SAMN03612287    GCA_001042835.1 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/042/835/GCA_001042835.1_ASM104283v1  -   CFBP7341\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/021/915/GCA_001021915.1_ASM102191v1/GCA_001021915.1_ASM102191v1_genomic.fna.gz -O Xoc_GCA_001021915.fna.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/940/825/GCA_000940825.1_ASM94082v1/GCA_000940825.1_ASM94082v1_genomic.fna.gz -O Xoc_GCA_000940825.fna.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/042/835/GCA_001042835.1_ASM104283v1/GCA_001042835.1_ASM104283v1_genomic.fna.gz -O Xoc_GCA_001042835.fna.gz\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/021/915/GCA_001021915.1_ASM102191v1/GCA_001021915.1_ASM102191v1_genomic.gbff.gz -O Xoc_GCA_001021915.gbff.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/940/825/GCA_000940825.1_ASM94082v1/GCA_000940825.1_ASM94082v1_genomic.gbff.gz -O Xoc_GCA_000940825.gbff.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/042/835/GCA_001042835.1_ASM104283v1/GCA_001042835.1_ASM104283v1_genomic.gbff.gz -O Xoc_GCA_001042835.gbff.gz\n</code></pre> <p>Do the same for retrieving the first 3 complete genomes of Xoc (Xanthomonas oryzae pv. oryzicola) with prefix Xoc_</p> Solution <pre><code>grep \"Xanthomonas oryzae pv. oryzae\" prokaryotes.txt | grep 'chromosome:' | head -3\n\nXanthomonas oryzae pv. oryzae   64187   PRJNA485465 485465  Proteobacteria  Gammaproteobacteria 4.99067 63.7    chromosome:NZ_CP031697.1/CP031697.1 -   1   4647    3652    2019/02/04  2022/03/27  Complete Genome Martin Luther University Halle-Wittenberg   SAMN09791860    GCA_004136375.1 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/136/375/GCA_004136375.1_ASM413637v1  -   ICMP3125\nXanthomonas oryzae pv. oryzae   64187   PRJNA269487 269487  Proteobacteria  Gammaproteobacteria 5.09305 63.7    chromosome:NZ_CP040687.1/CP040687.1 -   1   4757    3787    2019/05/28  2022/03/20  Complete Genome Bacterial Genomics and Evolution Laboratory, CSIR-Institute of Microbial Technology, Sector 39-A, Chandigarh, India SAMN03252586    GCA_001929235.2 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/929/235/GCA_001929235.2_ASM192923v2  -   IXO1088\nXanthomonas oryzae pv. oryzae   64187   PRJNA497605 497605  Proteobacteria  Gammaproteobacteria 5.05039 63.7    chromosome:NZ_CP033192.1/CP033192.1 -   1   4713    3695    2019/03/19  2022/04/07  Complete Genome University of Florida   SAMN10261817    GCA_004355825.1 -   ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/355/825/GCA_004355825.1_ASM435582v1  -   NX0260\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/136/375/GCA_004136375.1_ASM413637v1/GCA_004136375.1_ASM413637v1_genomic.fna.gz -O Xoo_GCA_004136375.fna.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/929/235/GCA_001929235.2_ASM192923v2/GCA_001929235.2_ASM192923v2_genomic.fna.gz -O Xoo_GCA_001929235.fna.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/355/825/GCA_004355825.1_ASM435582v1/GCA_004355825.1_ASM435582v1_genomic.fna.gz -O Xoo_GCA_004355825.fna.gz\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/136/375/GCA_004136375.1_ASM413637v1/GCA_004136375.1_ASM413637v1_genomic.gbff.gz -O Xoo_GCA_004136375.gbff.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/929/235/GCA_001929235.2_ASM192923v2/GCA_001929235.2_ASM192923v2_genomic.gbff.gz -O Xoo_GCA_001929235.gbff.gz\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/004/355/825/GCA_004355825.1_ASM435582v1/GCA_004355825.1_ASM435582v1_genomic.gbff.gz -O Xoo_GCA_004355825.gbff.gz\n</code></pre>"},{"location":"pages/training_2025/#convert-genbank-annotation-files-to-gff-format","title":"Convert GenBank annotation files to GFF format","text":"<p>We will make use of Perl scripts for converting genbank files to GFF format: https://github.com/bioperl/bioperl-live.git</p> <p>Clone this repository and run the dedicated bp_genbank2gff3 tool on each of the 6 Xanthomonas genomes.</p> <pre><code>git clone https://github.com/bioperl/bioperl-live.git\nchmod 755 bioperl-live/bin/*\n</code></pre> <pre><code>perl bioperl-live/bin/bp_genbank2gff3 Xoo_GCA_004136375.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoo_GCA_001929235.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoo_GCA_004355825.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoc_GCA_001021915.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoc_GCA_000940825.gbff.gz\nperl bioperl-live/bin/bp_genbank2gff3 Xoc_GCA_001042835.gbff.gz\n</code></pre> <pre><code>mv Xo*gff annotations\n</code></pre> <p>Have a look into the content of a GFF file.</p>"},{"location":"pages/training_2025/#comparison-between-2-genomes-with-minimap2-and-circos","title":"Comparison between 2 genomes (with Minimap2 and circos)","text":"<p>Compare 2 Xoo</p> <pre><code>gunzip Xoo*fna.gz\n</code></pre> <pre><code>ls Xoo*fna\n</code></pre> <p>Using minimap2, compare 2 genomes of Xoo (Xanthomonas oryzae pv.oryzae): Xoo_GCA_001929235 and Xoo_GCA_004136375.  </p> <p>Generate an output in paf format named \"minimap2.paf\".</p> Solution <pre><code>module load bioinfo/minimap2/2.24\nminimap2 Xoo_GCA_001929235.fna Xoo_GCA_004136375.fna -o minimap2.paf\n</code></pre> <p>Exercises</p> <pre><code>Using awk command applied on the paf output of minimap2, we can try to filter matches between the two genomes in oreder to visualize connections with circos. Generate a new file named \"links.txt\" that contains links between the two genomes. \nOn the other hand, in order to highlight inversion, do the same for matches that are inverted between the two genomes.\n</code></pre> Solution <pre><code>awk {'if (($4-$3)&gt;100000 &amp;&amp; ($5 ==\"+\"))print NR-1\" \"$1\" \"$3\" \"$4\"\\n\"NR-1\" \"$6\" \"$8\" \"$9'} minimap2.paf &gt;links.txt\nawk {'if (($4-$3)&gt;100000 &amp;&amp; ($5 ==\"-\"))print NR-1\" \"$1\" \"$3\" \"$4\"\\n\"NR-1\" \"$6\" \"$9\" \"$8'} minimap2.paf &gt;links_inverted.txt\n</code></pre> <p>Visualize matches between genomes with Circos</p> <p>We will use and adapt a template for circos configuration file for visualizing circos with links.</p> <pre><code>cp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/data/circos2.conf circos2.conf\n</code></pre> <p>Edit the Circos configuration file to add informations about links</p> Solution <pre><code>&lt;link segdup-bundle34&gt;\nz            = 50\ncolor        = nyt_red\nthickness    = 3\nfile         = /scratch3/TP_bcg/$USER/training_bcg/public_genomes/links.txt\nbezier_radius_purity = 0.2\nribbon      = yes\ncrest = 1\n&lt;/link&gt;\n\n&lt;link segdup-bundle35&gt;\nz            = 50\ncolor        = nyt_blue\nthickness    = 3\nfile         = /scratch3/TP_bcg/$USER/training_bcg/public_genomes/links_inverted.txt\nbezier_radius_purity = 0.2\nribbon      = yes\ncrest = 1\n&lt;/link&gt;\n</code></pre> <p>Edit a karyotype file with the two genomes and their size</p> <p>Make one of the genome in the opposite way by entering this line in the Circos configuration file</p> <p>chromosomes_reverse = CP040687.1</p> <p>Launch circos for visualization</p> <pre><code>circos/bin/circos -conf circos2.conf\n</code></pre> <p></p> <p>Alternatively, you can align the two Xoo genomes with the web application DGenies for displaying dot plot large genomes in an interactive, efficient and simple way https://dgenies.toulouse.inra.fr/run</p> <p>Do the same process for the comparing one Xoo and one Xoc</p>"},{"location":"pages/training_2025/#compare-genome-similarity-using-average-nucleotide-identity-ani-fastani","title":"Compare genome similarity using Average Nucleotide Identity (ANI) (fastANI)","text":"<p>Go to the directory \"public_genomes\"</p> <pre><code>cd /scratch3/TP_bcg/$USER/training_bcg/public_genomes\n</code></pre> <p>Create a file that contains the list of genomes to be taken as input</p> <pre><code>ls Xo*fna* &gt;list_genomes.txt\n</code></pre> <pre><code>module load bioinfo/fastani/1.33\nfastANI --rl list_genomes.txt --ql list_genomes.txt -o fastani.out --matrix\n</code></pre> <p>Check that genomes are closer within the same pathovar than between pathovars.</p> <p>Questions</p> <pre><code>Which are the closest genomes?\n</code></pre> Solution <p><pre><code>more fastani.out.matrix \n</code></pre> <pre><code>6  \nXoc_GCA_000940825.fna  \nXoc_GCA_001021915.fna   99.149597  \nXoc_GCA_001042835.fna   99.411034   99.196701  \nXoo_GCA_001929235.fna   97.226959   97.219826   97.288483  \nXoo_GCA_004136375.fna   97.313660   97.230530   97.365417   99.582520  \nXoo_GCA_004355825.fna   97.236938   97.235214   97.313324   99.704956   99.590271  \n</code></pre></p> <p>How to visualize ANI as heatmap matrix?</p> <pre><code>cp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/scripts/convertANI.pl .\ncp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/scripts/heatmaply.R .\nperl convertANI.pl fastani.out.matrix &gt;fastani.out.matrix.completed\n</code></pre> <p>Install using the R interface the library optparse and heatmaply</p> <pre><code>module load bioinfo/R/4.2.2\nR\n</code></pre> <pre><code>install.packages(\"optparse\")\ninstall.packages(\"heatmaply\")\nquit()\n</code></pre> <p>Launch the R script to generate a figure showing a heatmap of ANI values</p> <pre><code>Rscript heatmaply.R -f fastani.out.matrix.completed\n</code></pre> <p>It generates a HTML output showing a heatmap of ANI values for each genome pairwise comparison.</p> <p></p> <p>Try to make the same process including our newly assembled genome</p>"},{"location":"pages/training_2025/#gene-content-comparison-pangenome-analysis-using-roary","title":"Gene content comparison / Pangenome analysis (using Roary)","text":"<p>Have a look to the help page of the roary program.</p> <pre><code>cd /scratch3/TP_bcg/$USER/training_bcg\nmodule load bioinfo/roary/3.12.0\nroary --help\n</code></pre> <p>Launch roary for comparing the gene content of the 6 genomes.</p> <pre><code>roary -f roary_out public_genomes/*gff\n</code></pre> <p>Look at the content of the roary output:</p> <ul> <li> <p>Gene presence absence file</p> </li> <li> <p>summary statistics</p> </li> </ul> <pre><code>head -10 roary_out/gene_presence_absence.csv  \n\"Gene\",\"Non-unique Gene name\",\"Annotation\",\"No. isolates\",\"No. sequences\",\"Avg sequences per isolate\",\"Genome Fragment\",\"Order within Fragment\",\"Accessory Fragment\",\"Accessory Order with Fragment\",\"QC\",\"Min group size nuc\",\"Max group size nuc\",\"Avg group size nuc\",\"Xoc_GCA_000940825.gbff.gz\",\"Xoc_GCA_001021915.gbff.gz\",\"Xoc_GCA_001042835.gbff.gz\",\"Xoo_GCA_001929235.gbff.gz\",\"Xoo_GCA_004136375.gbff.gz\",\"Xoo_GCA_004355825.gbff.gz\"\n\"IXO1088_008755\",\"\",\"response regulator\",\"6\",\"6\",\"1\",\"1\",\"1683\",\"\",\"\",\"\",\"404\",\"404\",\"404\",\"BE73_06245.p01\",\"FE36_14125.p01\",\"ACU17_06495.p01\",\"10bd397a0f88aca11976f4a4f6631125_6321\",\"4e95a45ca635958849417c3d368d746d_7522\",\"cc532a0030968c6887cea9dec5a101c0_11970\"\n\"IXO1088_008760\",\"\",\"hypothetical protein\",\"6\",\"6\",\"1\",\"1\",\"1682\",\"\",\"\",\"\",\"497\",\"497\",\"497\",\"BE73_06250.p01\",\"FE36_14120.p01\",\"ACU17_06500.p01\",\"10bd397a0f88aca11976f4a4f6631125_6325\",\"4e95a45ca635958849417c3d368d746d_7526\",\"cc532a0030968c6887cea9dec5a101c0_11966\"\n\"EBA21_16420\",\"\",\"hypothetical protein\",\"6\",\"6\",\"1\",\"1\",\"1673\",\"\",\"\",\"\",\"512\",\"512\",\"512\",\"BE73_06290.p01\",\"FE36_14080.p01\",\"ACU17_06540.p01\",\"10bd397a0f88aca11976f4a4f6631125_6351\",\"4e95a45ca635958849417c3d368d746d_7554\",\"cc532a0030968c6887cea9dec5a101c0_11934\"\n\"pqqD\",\"\",\"pyrroloquinoline quinone biosynthesis peptide chaperone PqqD\",\"6\",\"6\",\"1\",\"1\",\"1671\",\"\",\"\",\"\",\"278\",\"278\",\"278\",\"BE73_06300.p01\",\"FE36_14070.p01\",\"ACU17_06550.p01\",\"10bd397a0f88aca11976f4a4f6631125_6359\",\"4e95a45ca635958849417c3d368d746d_7562\",\"cc532a0030968c6887cea9dec5a101c0_11926\"\n\"pqqB\",\"\",\"pyrroloquinoline quinone biosynthesis protein PqqB\",\"6\",\"6\",\"1\",\"1\",\"1669\",\"\",\"\",\"\",\"899\",\"899\",\"899\",\"BE73_06310.p01\",\"FE36_14060.p01\",\"ACU17_06560.p01\",\"10bd397a0f88aca11976f4a4f6631125_6367\",\"4e95a45ca635958849417c3d368d746d_7570\",\"cc532a0030968c6887cea9dec5a101c0_11918\"\n\"DZA53_10525\",\"\",\"hypothetical protein\",\"6\",\"6\",\"1\",\"1\",\"1664\",\"\",\"\",\"\",\"524\",\"524\",\"524\",\"BE73_06335.p01\",\"FE36_14035.p01\",\"ACU17_06585.p01\",\"10bd397a0f88aca11976f4a4f6631125_6391\",\"4e95a45ca635958849417c3d368d746d_7594\",\"cc532a0030968c6887cea9dec5a101c0_11894\"\n\"DZA53_10545\",\"\",\"energy transducer TonB\",\"6\",\"6\",\"1\",\"1\",\"1661\",\"\",\"\",\"\",\"875\",\"875\",\"875\",\"BE73_06355.p01\",\"FE36_14015.p01\",\"ACU17_06605.p01\",\"10bd397a0f88aca11976f4a4f6631125_6407\",\"4e95a45ca635958849417c3d368d746d_7610\",\"cc532a0030968c6887cea9dec5a101c0_11878\"\n\"DZA53_10580\",\"\",\"chemotaxis protein\",\"6\",\"6\",\"1\",\"1\",\"1654\",\"\",\"\",\"\",\"1202\",\"1208\",\"1205\",\"BE73_06390.p01\",\"FE36_13980.p01\",\"ACU17_06640.p01\",\"10bd397a0f88aca11976f4a4f6631125_6435\",\"4e95a45ca635958849417c3d368d746d_7638\",\"cc532a0030968c6887cea9dec5a101c0_11850\"\n\"ACU17_06675\",\"\",\"copper homeostasis protein CutC\",\"6\",\"6\",\"1\",\"1\",\"1646\",\"\",\"\",\"\",\"731\",\"731\",\"731\",\"BE73_06425.p01\",\"FE36_13950.p01\",\"ACU17_06675.p01\",\"10bd397a0f88aca11976f4a4f6631125_6467\",\"4e95a45ca635958849417c3d368d746d_7672\",\"cc532a0030968c6887cea9dec5a101c0_11818\"\n</code></pre> <pre><code>more roary_out/summary_statistics.txt  \nCore genes  (99% &lt;= strains &lt;= 100%)    2565\nSoft core genes (95% &lt;= strains &lt; 99%)  0\nShell genes (15% &lt;= strains &lt; 95%)  3763\nCloud genes (0% &lt;= strains &lt; 15%)   0\nTotal genes (0% &lt;= strains &lt;= 100%) 6328\n</code></pre> <p>In order to explore and represent graphs with roary outputs, we will make use of scripts available in Roary repository.</p> <pre><code>git clone https://github.com/sanger-pathogens/Roary.git\n</code></pre> <pre><code>python Roary/contrib/roary_plots/roary_plots.py roary_out/accessory_binary_genes.fa.newick roary_out/gene_presence_absence.csv\n</code></pre> <pre><code>query_pan_genome -g roary_out/clustered_proteins -a difference --input_set_one public_genomes/Xoc_GCA_000940825.gbff.gz.gff,public_genomes/Xoc_GCA_001021915.gbff.gz.gff,public_genomes/Xoc_GCA_001021915.gbff.gz.gff --input_set_two public_genomes/Xoo_GCA_001929235.gbff.gz.gff,public_genomes/Xoo_GCA_004136375.gbff.gz.gff,public_genomes/Xoo_GCA_004355825.gbff.gz.gff\n</code></pre> <p> </p>"},{"location":"pages/training_2025/#association-tests-with-metadata-pan-gwas-with-scoary","title":"Association tests with metadata (Pan-GWAS) (with Scoary)","text":"<p>Scoary is designed to take the gene_presence_absence.csv file from Roary as well as a traits file created by the user and calculate the assocations between all genes in the accessory genome and the traits. It reports a list of genes sorted by strength of association per trait.  </p> <p>For this task, we will use a larger file precalculated with Roary for the comparison of 90 strains. For each strain, we collected the pathovar information and we will use it to define genes potentially associated with pathovar Xoo/Xoc.</p> <pre><code>cp -rf /scratch3/TP_bcg/$USER/training_bcg/training_bacterial_comparative_genomics/data/pangenome_100xantho /scratch3/TP_bcg/$USER/training_bcg\ncd /scratch3/TP_bcg/$USER/training_bcg/pangenome_100xantho\n</code></pre> <p>Look into the input files gene_presence_absence.csv and traits.txt  </p> <pre><code>more gene_presence_absence.csv\n</code></pre> <pre><code>more traits.txt\n</code></pre> <p>Look at the help page of scoary and run it for defining genes associated with pathovar.</p> <pre><code>module load bioinfo/scoary/1.6.16\nscoary -t traits.txt -g gene_presence_absence.csv\n</code></pre> <p>Questions</p> <pre><code>Considering a p-value threshold 0.01, how many gene clusters are associated with pathovar?  \nHow many clusters are specifically present in pathovar oryzae (absent in oryzicola)?  \nHow many clusters are specifically present in pathovar oryzicola (absent in oryzae)?\n</code></pre> Solution <pre><code>awk -F \"\\\",\\\"\" {'if ($12&lt;0.01)print $_'} pathovar_*.results.csv | wc -l\n</code></pre> <pre><code>awk -F \"\\\",\\\"\" {'if ($4==0 &amp;&amp; $5==75)print $_'} pathovar_*.results.csv | wc -l\n</code></pre> <pre><code>awk -F \"\\\",\\\"\" {'if ($4==15 &amp;&amp; $5==0)print $_'} pathovar_*.results.csv | wc -l\n</code></pre>"},{"location":"pages/training_2025/#explore-pan-genome-with-panexplorer-web-application","title":"Explore pan-genome with PanExplorer web application","text":"<p>Upload your 6 genomes into the web application and choose the PanACoTA software for pangenome reconstruction. https://panexplorer.southgreen.fr/</p> <p></p> <p>Exercises</p> <pre><code>How many genes are strain-specific of each of the 3 Xoo strains?\n</code></pre>"},{"location":"pages/training_2025/#construct-a-pangenome-graph-using-minigraph2","title":"Construct a pangenome graph (using minigraph2)","text":"<p>Pangenome analysis based on gene clustering approach will result in a pangene atlas, construction of a presence/absence matrix of genes.  </p> <p>Pangenome can also be reconstructed directly on genomic sequences using pangenome graph approach using minigraph2.</p> <pre><code>cd /scratch3/TP_bcg/$USER/training_bcg/public_genomes\nmodule load bioinfo/minigraph/0.15\nminigraph -xggs -t16 Xoo_GCA_001929235.fna Xoo_GCA_004136375.fna &gt;Xoo_pangenome.gfa\n</code></pre> <p>Convert GFA into FASTA of the pangenome</p> <pre><code>module load bioinfo/gfatools/0.5\ngfatools gfa2fa -s Xoo_pangenome.gfa &gt;Xoo_pangenome.fa\n</code></pre> <p>Download the bandage software and load the GFA pangenome graph to be visualized</p> <p></p>"},{"location":"pages/course-information/code-of-conduct/","title":"SouthGreen Training Code of Conduct","text":"<p>Training is one of the core values of SouthGreen, and benefits from the contributions of the entire scientific community. We value the involvement of everyone in the community. We are committed to creating a friendly and respectful place for learning, teaching and contributing. All participants in our events and communications are expected to show respect and courtesy to others.</p> <p>To make clear what is expected, everyone participating in SouthGreen courses is required to conform to the Code of Conduct. This Code of Conduct applies to all spaces managed by SouthGreen including, but not limited to, courses, email lists, and online forums such as Studium, GitHub, Slack, Twitter and LinkedIn. Course organizers and teachers are expected to assist with the enforcement of the Code of Conduct.</p> <p>We are dedicated to providing a welcoming and supportive environment for all people, regardless of background or identity. By participating in this event, participants accept to abide by the SouthGreen Code of Conduct and accept the procedures by which any Code of Conduct incidents are resolved. Any form of behaviour to exclude, intimidate, or cause discomfort is a violation of the Code of Conduct. In order to foster a positive and professional learning environment we encourage the following kinds of behaviours in all platforms and training events:</p> <ul> <li>Use welcoming and inclusive language</li> <li>Be respectful of different viewpoints and experiences</li> <li>Gracefully accept constructive criticism</li> <li>Focus on what is best to all those involved in this training event</li> <li>Show courtesy and respect towards everyone involved in this training event</li> </ul> <p>For an extended description please see the ELIXIR Code of Conduct.</p>"}]}